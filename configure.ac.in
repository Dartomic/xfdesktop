dnl configure.ac
dnl
dnl xfdesktop - xfce4's desktop manager
dnl

dnl version info
m4_define([xfdesktop_version], [4.3.99.2])

dnl init autoconf
AC_INIT([xfdesktop], [xfdesktop_version], [bjt23@cornell.edu])
AC_PREREQ([2.50])

dnl init automake
XFDESKTOP_VERSION=xfdesktop_version
AM_INIT_AUTOMAKE([xfdesktop], [$XFDESKTOP_VERSION])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE

dnl check for UNIX variants
AC_AIX
AC_ISC_POSIX
AC_MINIX
AM_CONDITIONAL([HAVE_CYGWIN], [test "`uname | grep \"CYGWIN\"`" != ""])

dnl check for basic programs
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PROG_INTLTOOL([0.31], [no-xml])

dnl check for standard header files
AC_HEADER_STDC
AC_CHECK_HEADERS([errno.h fcntl.h math.h signal.h stddef.h \
                  string.h sys/stat.h sys/types.h sys/wait.h time.h \
                  unistd.h])
AC_CHECK_FUNCS([mmap sigaction srandom])

dnl Check for i18n support
XDT_I18N([@LINGUAS@])

dnl Check for X11 installed
XDT_CHECK_LIBX11_REQUIRE
XDT_CHECK_LIBSM

dnl required
XDT_CHECK_PACKAGE([GMODULE], [gmodule-2.0], [2.6.0])
XDT_CHECK_PACKAGE([GOBJECT], [gobject-2.0], [2.6.0])
XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [2.6.0])
XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [4.3.99.2])
XDT_CHECK_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0], [4.3.99.2])
XDT_CHECK_PACKAGE([LIBXFCE4MCS_CLIENT],  [libxfce4mcs-client-1.0], [4.3.99.2])
XDT_XFCE_MCS_PLUGIN([XFCE_MCS_MANAGER], [4.3.99.2])

dnl do we want desktop icons at all?
AC_ARG_ENABLE([desktop-icons],
    [AC_HELP_STRING([--disable-desktop-icons],
            [Do not compile in support for desktop icons (default=enabled)])],
        [ac_cv_enable_desktop_icons=$enableval],
        [ac_cv_enable_desktop_icons=yes])
if test "x$ac_cv_enable_desktop_icons" = "xno"; then
    enable_desktop_icons="no"
else
    enable_desktop_icons="yes"
    AC_DEFINE([ENABLE_DESKTOP_ICONS], [1], [Set if desktop icon support is enabled])
fi
AM_CONDITIONAL([ENABLE_DESKTOP_ICONS], [test "x$enable_desktop_icons" = "xyes"])

dnl if we want desktop icons, do we also want file icons?
AC_ARG_ENABLE([file-icons],
    [AC_HELP_STRING([--disable-file-icons],
            [Do not compile in support for desktop file icons (default=enabled)])],
        [ac_cv_enable_file_icons=$enableval],
        [ac_cv_enable_file_icons=yes])
if test "x$ac_cv_enable_file_icons" = "xno" -o "x$enable_desktop_icons" != "xyes"; then
    enable_file_icons="no"
else
    enable_file_icons="yes"
fi

if test "x$enable_desktop_icons" = "xyes" -a "x$enable_file_icons" = "xyes"; then
    dnl here i shall abuse the XDT_CHECK_PACKAGE macro
    XDT_CHECK_PACKAGE([THUNAR_VFS], [thunar-vfs-1], [0.5.0], [], [true])
    XDT_CHECK_PACKAGE([DBUS], [dbus-glib-1], [0.34], [], [true])
    if test "x$THUNAR_VFS_VERSION" != "x" -a "x$DBUS_VERSION" != "x"; then
        AC_DEFINE([ENABLE_FILE_ICONS], [1],
                  [Define if file icons should be enabled])
    else
        enable_file_icons="no"
    fi
fi

AM_CONDITIONAL([ENABLE_FILE_ICONS], [test "x$enable_file_icons" = "xyes"])


dnl i'd rather have these two only checked conditionally, but this macro also
dnl calls AM_CONDITIONAL(), which cannot be in an 'if' block

XDT_CHECK_OPTIONAL_PACKAGE([THUNARX], [thunarx-1], [0.5.0], [thunarx],
    [Whether to use Thunar's extension mechanism to add external features to the desktop icon implementation])
XDT_CHECK_OPTIONAL_PACKAGE([LIBEXO], [exo-0.3], [0.3.1.12], [exo],
    [Whether to use libexo for nifty icon effects])

AC_ARG_ENABLE([menu-editor],
        AC_HELP_STRING([--disable-menueditor],
                [Do not build the menueditor (default=enabled)]),
        [ac_cv_enable_menueditor=$enableval],
        [ac_cv_enable_menueditor=yes])
if test "x$ac_cv_enable_menueditor" = "xno"; then
        build_menueditor="no"
else
        build_menueditor="yes"
fi
AM_CONDITIONAL([BUILD_MENUEDITOR], [test "x$build_menueditor" = "xyes"])

AC_ARG_ENABLE([desktop-menu],
        AC_HELP_STRING([--disable-desktop-menu],
                [Do not build the desktop menu module (default=enabled)]),
        [ac_cv_enable_desktop_menu=$enableval],
        [ac_cv_enable_desktop_menu=yes])
if test "x$ac_cv_enable_desktop_menu" = "xno"; then
        build_desktop_menu="no"
else
        build_desktop_menu="yes"
        AC_DEFINE([USE_DESKTOP_MENU], [1],
                [Define if we should build the desktop menu module])
fi
AC_SUBST(DESKTOP_MENU_DIR)
AM_CONDITIONAL([BUILD_DESKTOP_MENU], [test "x$build_desktop_menu" = "xyes"])

AC_ARG_ENABLE([panel-plugin],
        [AC_HELP_STRING([--disable-panel-plugin],
                [Do not build the panel plugin (default=enabled)])],
        [ac_cv_enable_panel_plugin=$enableval],
        [ac_cv_enable_panel_plugin=yes])
if test "x$ac_cv_enable_panel_plugin" = "xno" -o "x$build_desktop_menu" = "xno"; then
        build_panel_plugin="no"
else
        build_panel_plugin="yes"
        XDT_CHECK_PACKAGE([LIBXFCE4PANEL], [libxfce4panel-1.0], [4.3.99.2])
fi
AM_CONDITIONAL([BUILD_PANEL_PLUGIN], [test "x$build_panel_plugin" = "xyes"])

AC_ARG_WITH([file-manager-fallback],
    [AC_HELP_STRING([--with-file-manager-fallback=PATH],
            [Default file manager fallback to handle external folders and applications (default=Thunar)])],
    [ac_cv_file_manager_fallback="$withval"],
    [ac_cv_file_manager_fallback=Thunar])
AC_DEFINE_UNQUOTED([FILE_MANAGER_FALLBACK], ["$ac_cv_file_manager_fallback"],
    [Set to the file manager to use as a fallback])

dnl check for debugging support
XDT_FEATURE_DEBUG

AC_OUTPUT([
Makefile
backdrops/Makefile
common/Makefile
doc/Makefile
doc/C/Makefile
doc/C/images/Makefile
doc/fr/Makefile
doc/fr/images/Makefile
doc/it/Makefile
doc/it/images/Makefile
menueditor/Makefile
modules/Makefile
modules/menu/Makefile
panel-plugin/Makefile
pixmaps/Makefile
po/Makefile.in
settings/Makefile
src/Makefile
xfdesktop.spec
])

echo
echo "Build Configuration:"
echo "  Build menu editor:                            $build_menueditor"
echo "  Build desktop menu module:                    $build_desktop_menu"
echo "  Build desktop menu panel plugin:              $build_panel_plugin"
echo "  Build support for desktop icons:              $enable_desktop_icons"
echo "      Include support for file/launcher icons:  $enable_file_icons"
echo
