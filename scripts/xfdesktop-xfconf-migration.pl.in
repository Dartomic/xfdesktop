#!/usr/bin/perl -w

use XML::Parser;
use strict;

my $xfconf_channel = 'xfce4-desktop';
my $mcs_channel = 'desktop';
my $autostart_file = 'xfconf-xfdesktop-migration-4.6.desktop';

sub xfconf_set {
    my ($prop, $type, $val) = @_;
    my $cmd = qq(xfconf-query -n -c $xfconf_channel -p $prop -t $type -s "$val");
    print $cmd."\n";
    system($cmd);
}

sub xfconf_set_color {
    my ($prop, $val) = @_;

    if($val =~ /\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+)/) {
        my ($r,$g,$b) = ($1,$2,$3);

        my $cmd = "xfconf-query -n -c $xfconf_channel -p $prop ";
        $cmd .= "-t uint16 -t uint16 -t uint16 -t uint16";
        $cmd .= "-s $r -s $g -s $b -s 65535";

        print $cmd."\n";
        system($cmd);
    } else {
        print STDERR "Couldn't parse color \"$val\"";
    }
}

sub tobool {
    my $val = shift;
    return ($val == 0 || lc($val) eq 'false' ? 'false' : 'true');
}

if(!defined($ENV{'XDG_CONFIG_HOME'})) {
    $ENV{'XDG_CONFIG_HOME'} = $ENV{'HOME'}.'/.config';
}

my $p = XML::Parser->new(Style => 'Tree');
my $mcs = $p->parsefile($ENV{'XDG_CONFIG_HOME'}."/xfce4/mcs_settings/$mcs_channel.xml") or do {
    print STDERR "No $mcs_channel.xml; nothing to migrate\n";
    exit(0);
};

my $mcs_option_element = -1;
for(my $i = 0; $i < scalar(@{$mcs}); $i++) {
    if(${$mcs}[$i] eq 'mcs-option') {
        $mcs_option_element = $i;
        last;
    }
}

my @mcs_option = @{${$mcs}[$mcs_option_element+1]};
my %options = ();
for(my $i = 0; $i < scalar(@mcs_option); $i++) {
    if($mcs_option[$i] eq 'option') {
        $options{${${$mcs_option[$i+1]}[0]}{'name'}} = ${$mcs_option[$i+1]}[0];
    }
}

if(defined($options{'managedesktop-show-warning'})) {
    xfconf_set('/manage-desktop/show-warning-off',
               'bool',
               tobool($options{'managedesktop-show-warning'}->{'value'}));
}

if(defined($options{'managedesktop-show-warning-on'})) {
    xfconf_set('/manage-desktop/show-warning-on',
               'bool',
               tobool($options{'managedesktop-show-warning-on'}->{'value'}));
}

if(defined($options{'desktopiconstyle'})) {
    xfconf_set('/desktop-icons/style',
               'int',
               $options{'desktopiconstyle'}->{'value'});
}

if(defined($options{'icons_font_size'})) {
    xfconf_set('/desktop-icons/font-size',
               'double',
               $options{'icons_font_size'}->{'value'});
}

if(defined($options{'icons_icon_size'})) {
    xfconf_set('/desktop-icons/icon-size',
               'uint',
               $options{'icons_icon_size'}->{'value'});
}

if(defined($options{'icons_use_system_font_size'})) {
    xfconf_set('/desktop-icons/use-custom-font-size',
               'bool',
               tobool($options{'icons_use_system_font_size'}->{'value'}) eq 'true'
               ? 'false' : 'true');
}

if(defined($options{'showdm'})) {
    xfconf_set('/desktop-menu/show',
               'bool',
               tobool($options{'showdm'}->{'value'}));
}

if(defined($options{'showdmi'})) {
    xfconf_set('/desktop-menu/show-icons',
               'bool',
               tobool($options{'showdmi'}->{'value'}));
}

if(defined($options{'showwl'})) {
    xfconf_set('/windowlist-menu/show',
               'bool',
               tobool($options{'showwl'}->{'value'}));
}

if(defined($options{'wl_show_ws_names'})) {
    xfconf_set('/windowlist-menu/show-workspace-names',
               'bool',
                tobool($options{'wl_show_ws_names'}->{'value'}));
}

if(defined($options{'wl_sticky_once'})) {
    xfconf_set('/windowlist-menu/show-sticky-once',
               'bool',
               tobool($options{'wl_sticky_once'}->{'value'}));
}

if(defined($options{'wl_submenus'})) {
    xfconf_set('/windowlist-menu/show-submenus',
               'bool',
               tobool($options{'wl_submenus'}->{'value'}));
}

# this is a bit overkill.  attempt up to 8 screens, 8 monitors
for(my $s = 0; $s < 8; $s++) {
    for(my $m = 0; $m < 8; $m++) {
        my $suf = '_'.$s.'_'.$m;
        my $p = "/backdrop/screen$s/monitor$m";

        # this is a crappy non-screen-numbered setting
        if(defined($options{'xineramastretch'})) {
            xfconf_set("/backdrop/screen$s/xinerama-stretch",
                       'bool',
                       tobool($options{'xineramastretch'}->{'value'}));
        }

        if(defined($options{'brightness'.$suf})) {
            xfconf_set("$p/brightness",
                       'int',
                       $options{'brightness'.$suf}->{'value'});
        }

        if(defined($options{'color1'.$suf})) {
            xfconf_set_color("$p/color1",
                             $options{'color1'.$suf}->{'value'});
        }

        if(defined($options{'color2'.$suf})) {
            xfconf_set_color("$p/color2",
                             $options{'color2'.$suf}->{'value'});
        }

        if(defined($options{'colorstyle'.$suf})) {
            xfconf_set("$p/color-style",
                       'int',
                       $options{'colorstyle'.$suf}->{'value'});
        }

        if(defined($options{'imagepath'.$suf})) {
            xfconf_set("$p/image-path",
                       'string',
                       $options{'imagepath'.$suf}->{'value'});
        }

        if(defined($options{'imagestyle'.$suf})) {
            xfconf_set("$p/image-style",
                       'int',
                       $options{'imagestyle'.$suf}->{'value'});
        }

        if(defined($options{'showimage'.$suf})) {
            xfconf_set("$p/image-show",
                       'bool',
                       tobool($options{'showimage'.$suf}->{'value'}));
        }
    }
}

# 'hidden' options
open(RCFILE, '<'.$ENV{'XDG_CONFIG_HOME'}.'/xfce4/desktop/xfdesktoprc') and do {
    while(<RCFILE>) {
        my ($key, $val) = split(/\s*=\s*/, $_, 2);
        if(defined($key) && ($key eq 'show-filesystem' || $key eq 'show-home'
           || $key eq 'show-trash' || $key eq 'show-removable')
           && defined($val))
        {
            xfconf_set("/desktop-icons/file-icons/$key", 'bool',
                       tobool($val));
        }
    }
    close(RCFILE);
};

# do it this way so as not to require File::Copy
open(DIN, '<@sysconfdir@/xdg/autostart/'.$autostart_file) or die("Unable to open @sysconfdir@/xdg/autostart/$autostart_file: $!");
open(DOUT, '>'.$ENV{'XDG_CONFIG_HOME'}.'/autostart/'.$autostart_file) or die("Unable to open local autostart file: $!");
while(<DIN>) {
    print DOUT;
}
print DOUT "Hidden=true\n";
close(DIN);
close(DOUT);
